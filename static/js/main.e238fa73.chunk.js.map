{"version":3,"sources":["Nav.js","Page/list.js","Page/create.js","Page/view.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","expand","sticky","style","marginBottom","to","Brand","href","Nav","Link","big_arr","Array","fill","sheet_data","title","summary","image","tags","HeaderImage","width","height","Directory","Container","fluid","Row","className","Card","margin","Img","as","Body","Title","Text","Button","map","tag","Badge","i","pre_sheet_data","content","Page","create","Jumbotron","Col","placeholder","type","value","md","initialValue","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e238fa73.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nconst Navigation = () => (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\"\n        sticky=\"top\" style={{ marginBottom: '1rem' }}>\n        <LinkContainer to=\"/\">\n            <Navbar.Brand href=\"#home\">ðŸ“‡ Rolodex</Navbar.Brand>\n        </LinkContainer>\n        <Nav>\n            <LinkContainer to=\"/create\">\n                <Nav.Link>Create</Nav.Link>\n            </LinkContainer>\n        </Nav>\n    </Navbar>\n)\n\nexport default Navigation","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Navigation from '../Nav';\nimport 'holderjs';\nimport Badge from 'react-bootstrap/Badge';\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Unsplash from 'react-unsplash-wrapper'\n\nconst big_arr = new Array(24).fill(0);\nconst sheet_data = {\n\ttitle: 'The Three Gods',\n\tsummary: 'Theres three of them.',\n\timage: 'fuck_you',\n\ttags: ['legendary', 'bird', 'monsters'],\n}\n\nconst HeaderImage = ()=>(\n\t<Unsplash width='300' height='150'/>\n)\n\nconst Directory = () => (\n\t<main>\n\t\t<Container fluid>\n\t\t\t<Row className=\"justify-content-around\">\n\t\t\t\t<Card style={{ width: '300px', margin: '1rem' }}>\n\t\t\t\t\t<Card.Img variant=\"top\" as={HeaderImage} />\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card.Title>{sheet_data.title}</Card.Title>\n\t\t\t\t\t\t<Card.Text>{sheet_data.summary}</Card.Text>\n\t\t\t\t\t\t<LinkContainer to=\"/view\">\n\t\t\t\t\t\t\t<Button variant=\"primary\">Go somewhere</Button>\n\t\t\t\t\t\t</LinkContainer>\n\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t{sheet_data.tags.map(\n\t\t\t\t\t\t\t\t(tag) =>\n\t\t\t\t\t\t\t\t\t(<span>\n\t\t\t\t\t\t\t\t\t\t<Badge variant=\"info\">{tag}</Badge>\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t</span>)\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t\t{big_arr.map(i => (\n\t\t\t\t\t\t<Card style={{ width: '300px', margin: '1rem' }}>\n\t\t\t\t\t\t\t<Card.Img variant=\"top\" as={HeaderImage} />\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Title>Card Title</Card.Title>\n\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\tSome quick example text to build on the card title and make up the bulk of\n\t\t\t\t\t\t\t\t\tthe card's content.\n    </Card.Text>\n\t\t\t\t\t\t\t\t<Button variant=\"primary\">Go somewhere</Button>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t))}\n\t\t\t</Row>\n\t\t</Container>\n\t</main>\n);\nexport default Directory;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport 'holderjs';\n\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\n\nimport { Editor } from '@toast-ui/react-editor';\nimport Unsplash from 'react-unsplash-wrapper'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nconst HeaderImage = () => (\n\t<Unsplash width='200' height='200' style={{ 'borderRadius': '50%' }} />\n)\n\n/**\n * So this is actually just gonna have a few features\n * \n * - The card from the main page as the jumbotron\n * - Extracted tag list\n * - The markdown file, with ally headers and subheaders tossed into an accordion\n */\nconst pre_sheet_data = {\n\ttitle: 'The Three Gods',\n\tsummary: 'Theres three of them.',\n\timage: 'fuck_you',\n\ttags: ['a', 'b', 'c'],\n\tcontent:\n\t\t`# Articuno\nA bird made out of ice.\n\n# Zapdos\nA bird made out of light.\n\n# Moltres\nA bird made out of fire.`,\n}\n\nconst Page = ({create}) => {\n\tconst sheet_data=create?{}:pre_sheet_data\n\treturn (\n\t<main>\n\t\t<Container >\n\t\t\t<Jumbotron>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<h1><input placeholder='Title' type=\"text\" style={{ 'width': '100%' }} value={sheet_data.title} /></h1>\n\t\t\t\t\t\t<p><input placeholder='Tags' type=\"text\" style={{ 'width': '100%' }} /></p>\n\t\t\t\t\t\t<p><input placeholder='Summary' type=\"text\" style={{ 'width': '100%' }} /></p>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col md=\"auto\">\n\t\t\t\t\t\t<HeaderImage />\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<LinkContainer to=\"/view\" style={{ 'width': '100%' }}>\n\t\t\t\t\t\t\t<Button>Save</Button>\n\t\t\t\t\t\t</LinkContainer>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Jumbotron>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Editor initialValue={sheet_data.content} />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<LinkContainer to=\"/view\" style={{ 'width': '100%' }}>\n\t\t\t\t\t\t<Button>Save</Button>\n\t\t\t\t\t</LinkContainer>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t</main>\n)}\n\nexport default Page;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport Navigation from '../Nav';\nimport 'holderjs';\n\nimport { Viewer } from '@toast-ui/react-editor';\nimport Unsplash from 'react-unsplash-wrapper'\nimport { LinkContainer } from 'react-router-bootstrap'\n\n/**\n * So this is actually just gonna have a few features\n * \n * - The card from the main page as the jumbotron\n * - Extracted tag list\n * - The markdown file, with ally headers and subheaders tossed into an accordion\n */\nconst sheet_data = {\n\ttitle: 'The Three Gods',\n\tsummary: 'Theres three of them.',\n\timage: 'fuck_you',\n\ttags: ['legendary', 'bird', 'monsters'],\n\tcontent: \n`# Articuno\nA bird made out of ice.\n\n# Zapdos\nA bird made out of light.\n\n# Moltres\nA bird made out of fire.`,\n}\n\nconst HeaderImage = ()=>(\n\t<Unsplash width='200' height='200' style={{'borderRadius':'50%'}}/>\n)\n\nconst Page = () => (\n\t<main>\n\t\t<Container >\n\t\t\t<Jumbotron>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<h1>{sheet_data.title}</h1>\n\t\t\t\t\t\t<p>{sheet_data.summary}</p>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col md=\"auto\">\n\t\t\t\t\t\t<HeaderImage/>\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<LinkContainer to=\"/edit\" style={{ 'width': '100%' }}>\n\t\t\t\t\t\t\t<Button>Edit</Button>\n\t\t\t\t\t\t</LinkContainer>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Jumbotron>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t{sheet_data.tags.map(\n\t\t\t\t\t\t(tag) =>\n\t\t\t\t\t\t\t(<span>\n\t\t\t\t\t\t\t\t<Badge variant=\"info\">{tag}</Badge>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t</span>)\n\t\t\t\t\t)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Viewer initialValue={sheet_data.content} />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t</main>\n);\n\nexport default Page;\n","import React from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n  } from \"react-router-dom\";\nimport Navigation from './Nav';\nimport ListPages from './Page/list';\nimport CreatePage from './Page/create';\nimport ViewPage from './Page/view';\n\nconst App = () => (\n\t<main>\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<Navigation />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<ListPages />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/view\">\n\t\t\t\t\t<ViewPage />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/edit\">\n\t\t\t\t\t<CreatePage/>\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/create\">\n\t\t\t\t\t<CreatePage create/>\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t</main>\n);\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}